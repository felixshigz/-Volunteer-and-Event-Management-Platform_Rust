type Admin = record {
  id : nat64;
  password : text;
  name : text;
  created_at : nat64;
  email : text;
};
type AdminPayload = record { password : text; name : text; email : text };
type Event = record {
  id : nat64;
  organizer_id : nat64;
  title : text;
  date_time : nat64;
  description : text;
  created_at : nat64;
  location : text;
};
type EventOrganizer = record {
  id : nat64;
  contact : text;
  name : text;
  created_at : nat64;
  email : text;
};
type EventOrganizerPayload = record {
  contact : text;
  name : text;
  email : text;
};
type EventPayload = record {
  organizer_id : nat64;
  title : text;
  date_time : nat64;
  description : text;
  location : text;
};
type Feedback = record {
  id : nat64;
  feedback : text;
  created_at : nat64;
  rating : nat8;
  event_id : nat64;
  volunteer_id : nat64;
};
type FeedbackPayload = record {
  feedback : text;
  rating : nat8;
  event_id : nat64;
  volunteer_id : nat64;
};
type MarkRegistrationAsAttendedPayload = record {
  admin_password : text;
  admin_id : nat64;
  registration_id : nat64;
};
type MarkRegistrationAsMissedPayload = record {
  admin_password : text;
  admin_id : nat64;
  registration_id : nat64;
};
type Registration = record {
  id : nat64;
  status : RegistrationStatus;
  admin_password : text;
  admin_id : nat64;
  attended_at : opt nat64;
  event_id : nat64;
  registered_at : nat64;
  volunteer_id : nat64;
};
type RegistrationPayload = record {
  admin_password : text;
  admin_id : nat64;
  event_id : nat64;
  volunteer_id : nat64;
};
type RegistrationStatus = variant { Attended; Missed; Registered };
type Result = variant { Ok : Admin; Err : text };
type Result_1 = variant { Ok : Event; Err : text };
type Result_2 = variant { Ok : EventOrganizer; Err : text };
type Result_3 = variant { Ok : Feedback; Err : text };
type Result_4 = variant { Ok : Volunteer; Err : text };
type Result_5 = variant { Ok : vec Event; Err : text };
type Result_6 = variant { Ok : vec Feedback; Err : text };
type Result_7 = variant { Ok : vec Registration; Err : text };
type Result_8 = variant { Ok : vec Volunteer; Err : text };
type Result_9 = variant { Ok : Registration; Err : text };
type Volunteer = record {
  id : nat64;
  contact : text;
  name : text;
  created_at : nat64;
  email : text;
  skills : vec text;
};
type VolunteerPayload = record {
  contact : text;
  name : text;
  email : text;
  skills : vec text;
};
service : {
  create_admin : (AdminPayload) -> (Result);
  create_event : (EventPayload) -> (Result_1);
  create_event_organizer : (EventOrganizerPayload) -> (Result_2);
  create_feedback : (FeedbackPayload) -> (Result_3);
  create_volunteer : (VolunteerPayload) -> (Result_4);
  get_all_events : () -> (Result_5) query;
  get_all_feedbacks : () -> (Result_6) query;
  get_all_registrations : () -> (Result_7) query;
  get_all_volunteers : () -> (Result_8) query;
  get_event_by_organizer_name : (text) -> (Result_5) query;
  get_event_by_title : (text) -> (Result_1) query;
  get_feedback_by_event_id : (nat64) -> (Result_6) query;
  get_volunteer_by_id : (nat64) -> (Result_4) query;
  get_volunteers_by_chunk : (nat64, nat64) -> (Result_8) query;
  mark_registration_as_attended : (MarkRegistrationAsAttendedPayload) -> (
      Result_9,
    );
  mark_registration_as_missed : (MarkRegistrationAsMissedPayload) -> (Result_9);
  register_volunteers_for_events : (RegistrationPayload) -> (Result_9);
}
